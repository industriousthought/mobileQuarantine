(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var events = require('./events.js');
var Character = require('./character.js');

module.exports = function(options) {

    var player = Character({
        pos: options.pos,
        type: 'player',
        mode: 'standing',
        modes: {
            die: function() {
                events.emit('die');
            },
            standing: function() {
                player.pose.y = 0;
                player.velocity = 0;
            },
            running: function() {

            },
            walking: function() {

            },
            shooting: function() {
                player.pose.y = 1;
                if (player.currentWeapons.length === 0) return;
                var coolDown = player.currentWeapons[player.weilding].coolDown;
                var tick = coolDown - 1;
                player.addEffect(function() {
                    if (player.currentMode !== 'shooting') return false;
                    tick++;
                    if (tick > coolDown) { 
                        player.currentWeapons[player.weilding].use();
                        tick = 0;
                    }
                    return true;
                });
            }
        },

        collide: function(collider) {
            switch (collider.base) {
                case 'weapon':
                    if (!collider.inContainer()) player.takeItems(collider);
                    break;

            }

            switch (collider.type) {
                case 'zombie':
                    events.emit('gameOver');
                    console.log('gameoverrrrrr');
                    //player.health -= 0.4;
                    break;
            }

        }
        
    });
    player.nextWeapon = function() {
        player.weilding++;
        if (weilding === player.currentWeapons.length) weilding = 0;
    };
    player.weilding = 0;
    player.addEffect(function() {
        player.currentWeapons = player.getInventoryByBase('weapon');
        player.currentWeapons.forEach(function(weapon, index) {
            if (weapon.selectWeapon) player.weilding = index;
        });
        return true;
    });


    return player;
};

},{"./character.js":6,"./events.js":11}],2:[function(require,module,exports){
var Character = require('./character.js');

module.exports = function(options) {

    var currentAttractor = false;
    var speed = 1 + Math.random() * 3;

    var zombie = Character({
        type: 'zombie',
        mode: 'wandering',
        pos: options.pos,
        modes: {
            rewandering: function() {
                zombie.addMode('wandering');
            },
            wandering: function() {
                //console.log('wandering');
                //if (Math.random() < 0.05) zombie.audio = 'growl';
                var timeLength = 1 + parseInt(Math.random() * 3 * 1000);
                var startTime = Date.now();
                var randomSpeed = Math.random() * 2;
                zombie.pos.rot = Math.random() * Math.PI * 2;
                zombie.pose.y = 1;

                zombie.addEffect(function() {
                    var now = Date.now();
                    if (zombie.currentMode !== 'wandering') {
                        return false;
                    }
                    if (startTime + timeLength < now) {
                        zombie.addMode('rewandering');
                        return false; 
                    }
                    zombie.push({x: Math.cos(zombie.pos.rot) * randomSpeed, y: Math.sin(zombie.pos.rot) * randomSpeed});
                    return true;
                });
            },
            searching: function() {
            },
            chasing: function() {
                zombie.addEffect(function() {
                    var theta = zombie.lookAtObj(currentAttractor);
                    if (zombie.currentMode !== 'chasing' || !currentAttractor) {
                        return false;
                    }
                    zombie.push({x: Math.cos(theta) * speed / 2, y: Math.sin(theta) * speed / 2});
                    return true;
                });
            },
            running: function() {
            },
            biting: function() {
            },
            staggering: function() {
            },
            die: function() {
                zombie.unload();
            }
        },
        collide: function(collider) {
            switch (collider.type) {
                case 'bullet':
                case 'meelee':
                    zombie.health -= collider.power / 100;
                    break;
            }
        }
    });

    zombie.step(function() {
        currentAttractor = world.getItemsByType('player')[0];
        if (currentAttractor) {
            zombie.addMode('chasing');
        } else {
            zombie.addMode('wandering');
        }
    });

    return zombie;
};

},{"./character.js":6}],3:[function(require,module,exports){
(function() {
    var lastTime = 0;
    var vendors = ['ms', 'moz', 'webkit', 'o'];
    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
        window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] 
            || window[vendors[x]+'CancelRequestAnimationFrame'];
    }

    if (!window.requestAnimationFrame)
        window.requestAnimationFrame = function(callback, element) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
            var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
                                       timeToCall);
                                       lastTime = currTime + timeToCall;
                                       return id;
        };

        if (!window.cancelAnimationFrame)
            window.cancelAnimationFrame = function(id) {
                clearTimeout(id);
            };
}());

},{}],4:[function(require,module,exports){
var getId = require('./getId.js').getId;


module.exports = function() {
    var pushEvents = [];
    var moveEvents = [];
    var loadEvents = [];
    var unloadEvents = [];
    var stepEvents = [];
    var loaded = false;
    var moved = false;
    var newEffects = [];
    var effects = [];
    var obj = {
        inContainer: function() {
            return (!!obj.owner);
        },
        load: function() {
            var args = [].slice.call(arguments);
            if (args.length) {
                if (loaded) {
                    args.forEach(function(e) { e(); });
                } else {
                    loadEvents = args.concat(loadEvents);
                }
                return;
            }
            if (!loaded) {
                loadEvents.forEach(function(e) { e(); });
                loaded = true;
            }
        },
        unload: function() {
            var args = [].slice.call(arguments);
            if (args.length > 0) return unloadEvents = args.concat(unloadEvents);
            unloadEvents.forEach(function(e) { e(); });
            world.deleteItem(obj.id);
            if (obj.owner) obj.owner.dropItem(obj);
        },
        step: function() {
            var args = [].slice.call(arguments);
            if (args.length > 0) return stepEvents = args.concat(stepEvents);
            stepEvents.forEach(function(e) { e(); });
            effects = effects.concat(newEffects);
            newEffects = [];
            effects = effects.filter(function(item) { return item.call(obj); });
            if (moved) obj.processMovementEvents();
            if (obj.pos.rot > Math.PI * 2) obj.pos.rot -= Math.PI * 2;
            if (obj.pos.rot < 0) obj.pos.rot += Math.PI * 2;

        },
        processMovementEvents: function() {
            obj.velocity = Math.sqrt(obj.pos.vec.x * obj.pos.vec.x + obj.pos.vec.y * obj.pos.vec.y);
            if (obj.velocity > 30) {
                //debugger;
                obj.pos.vec.x = obj.pos.vec.x / (obj.velocity / 30);
                obj.pos.vec.y = obj.pos.vec.y / (obj.velocity / 30);
                obj.velocity = 30;
            }
            obj.pos.x += obj.pos.vec.x;
            obj.pos.y += obj.pos.vec.y;
            if (obj.owner) {
                obj.move(obj.owner.pos);
            }
            obj.pos.vec.x = 0;
            obj.pos.vec.y = 0;
            moveEvents.forEach(function(fn) { fn(); });
            moved = false;
        },
        id: getId(),
        pos: {
            x: 0,
            y: 0,
            rot: 0,
            vec: {
                x: 0,
                y: 0
            }
        },
        move: function(pos) {
            if (pos.ev) {
                moveEvents.push(pos.ev);
            }
            if (pos.x) obj.pos.x = pos.x;
            if (pos.y) obj.pos.y = pos.y;
            if (pos.rot) obj.pos.rot = pos.rot;
            moved = true;
        },
        push: function(vec) {
            if (vec.ev) {
                moveEvents.push(vec.ev);
            }
            if (vec.x) obj.pos.vec.x += vec.x;
            if (vec.y) obj.pos.vec.y += vec.y;
            moved = true;
        },
        addEffect: function(fn) {
            newEffects.push(fn);
        }
    };


    return obj;
};


},{"./getId.js":14}],5:[function(require,module,exports){
var projectile = require('./projectile.js');
var makeSolid = require('./makeSolid.js');

var Bullet = function(options) {

    var bullet = projectile();

    bullet.fire = function(pos) {
        var distance = 0;
        var theta = pos.rot;
        bullet.inertia = true;
        bullet.pos.rot = pos.rot;
        bullet.onTop = true;
        bullet.velocity = 25;
        makeSolid(bullet);
        bullet.step(function() {
            if (bullet.die || distance > bullet.range) bullet.unload();
            distance++;
            bullet.push({x: Math.cos(theta) * bullet.velocity, y: Math.sin(theta) * bullet.velocity});
        });
        bullet.radius = 1;
        bullet.collide = function(collider){
            switch (collider.type) {
                case 'zombie':
                    bullet.unload();
                    break;
            }
            switch (collider.base) {
                case 'square':
                    bullet.unload();
                    break;
            }
        }
        bullet.move({x: pos.x + Math.cos(theta) * 75, y: pos.y + Math.sin(theta) * 75});
    };

    for (var key in options) {
        bullet[key] = options[key];
    }

    bullet.type = 'bullet';
    return bullet;
};




module.exports = Bullet;

},{"./makeSolid.js":20,"./projectile.js":25}],6:[function(require,module,exports){
var baseEntity = require('./baseEntity.js');
var makeVisible = require('./makeVisible.js');
var makeInventory = require('./makeInventory.js');
var makeSolid = require('./makeSolid.js');
var makeGeometry = require('./makeGeometry.js');

module.exports = function(options) {
    var character = baseEntity();
    var aniTick = 0;
    makeInventory(character);
    makeGeometry(character, 'circle');
    makeSolid(character);
    makeVisible(character);
    character.radius = 50;
    character.solid = true;
    character.onTop = true;
    character.geometry = 'circle';
    character.lookAtVec = function(vec) {
        var theta = Math.atan2(vec.y, vec.x);
        character.pos.rot = theta + Math.PI;
        return theta;
    };
    character.lookAtObj = function(obj) {
        var theta = Math.atan2(obj.pos.y - character.pos.y, obj.pos.x - character.pos.x);
        character.pos.rot = theta;
        return theta;
    };
    character.base = 'character';
    character.health = 1;
    character.step(function() {
        if (character.health <= 0) character.addMode('die');
        aniTick++;
        if (!character.velocity) {
            character.pose.x = 0;
        } else {
            if (aniTick > 16 - character.velocity) {
                aniTick = 0;
                if (character.pose.x < character.textureData.poses.slides[character.pose.y] - 1) {
                    character.pose.x++;
                } else {
                    character.pose.x = 0;
                }
            } else {
                aniTick++;
            }
        }
    });
    character.modes = options.modes;
    character.collide = options.collide;
    character.type = options.type;
    character.addMode = function(mode) {
        if (character.currentMode === mode) return;
        character.currentMode = mode;
        character.modes[mode]();
    };
    character.pose = {x: 0, y: 0};
    character.load(function() { character.addMode(options.mode); });
    character.move(options.pos);
    return character;
};


},{"./baseEntity.js":4,"./makeGeometry.js":17,"./makeInventory.js":19,"./makeSolid.js":20,"./makeVisible.js":22}],7:[function(require,module,exports){
document.oncontextmenu = function() { return false; }
var loaded = false;
var events = require('./events.js');
var getId = require('./getId.js').getId;
var effects = require('./effects.js');
var objs = {};
var menus = {};
var inputs = {};
window.functions = {};
var menuCloseEvents = {};
var loadEvents = [];
var canvases = {};
var oldWeapons = [];
var iconEvents = [];
var weaponIcons = [];


window.onload = function() { 
    [].slice.call(document.getElementsByClassName('menus')).forEach(function(obj, index, array) { 
        menus[obj.id] = obj; 
        effects.fadeOut(obj);
    });
    [].slice.call(document.getElementsByClassName('domobj')).forEach(function(obj, index, array) { 
        objs[obj.id] = obj; 
    });
    [].slice.call(document.getElementsByTagName('input')).forEach(function(obj, index, array) { 
        inputs[obj.id] = obj; 
    });
    objs['modalAck'].addEventListener('click', function() { effects.fadeOut(objs['modal']); });
    objs['window'] = window;
    loaded = true; 
    loadEvents.forEach(function(ev) { ev(); }); 
};

var ensureObjId = function(obj) {
    if (obj.id) return obj.id;
    obj.id = getId();
    objs[obj.id] = obj;
    return obj.id;
};

var resetCanvas = function(canvas) {
    var canvasWidth = canvas.getAttribute('width');
    var canvasHeight = canvas.getAttribute('height');
    var screenWidth = window.innerWidth;
    var screenHeight = window.innerHeight;
    if (canvasWidth / canvasHeight > screenWidth / screenHeight) {
        canvas.style.width = screenWidth + 'px';
        canvas.style.height = screenWidth * (canvasHeight / canvasWidth) + 'px';
        canvas.style.top = (screenHeight - (screenWidth * (canvasHeight / canvasWidth))) / 2 + 'px';
        canvas.style.left = '0px'; 
    } else {
        canvas.style.height = screenHeight + 'px';
        canvas.style.width = screenHeight * (canvasWidth / canvasHeight) + 'px';
        canvas.style.left = (screenWidth - (screenHeight * (canvasWidth / canvasHeight))) / 2 + 'px';
        canvas.style.top = '0px'; 
    }
};



var api = {
    setCanvas: function(id, dim) {
        if (dim) {
            objs[id].setAttribute('width', dim.width);
            objs[id].setAttribute('height', dim.height);
            if (!canvases[id]) {
                canvases[id] = objs[id];
                resetCanvas(objs[id]);
                api.attachEvent('window', 'resize', resetCanvas.bind(null, objs[id]));
            } 
        }
        return objs[id].getContext('webgl');
    },
    clearInputs: function(ancestor) {
        ancestor = api.getObjById(ancestor);
        for (var input in inputs) {
            if (ancestor.contains(inputs[input])) inputs[input].value = '';
        }
    },
    onHideMenu: function(id, func) {
        if (!menuCloseEvents[id]) menuCloseEvents[id] = [];
        menuCloseEvents[id].push(func);
    },
    hideMenu: function(id) {
        if (id) {
            effects.fadeOut(menus[id]);
            if (menuCloseEvents[id]) {
                menuCloseEvents[id].forEach(function(f) { f(); });
                menuCloseEvents[id] = [];
            }
            return;
        }
        for (var menu in menus) {
            if (menus[menu].id !== 'worldInspector') {
                effects.fadeOut(menus[menu]);
                if (menuCloseEvents[menu]) {
                    menuCloseEvents[menu].forEach(function(f) { f(); });
                    menuCloseEvents[menu] = [];
                }
            }
        }
    },
    showMenu: function(id, pos) {
        effects.fadeIn(menus[id]);
        if (pos) {
            menus[id].style.left = parseInt(pos.x - 20) + 'px';
            menus[id].style.top = parseInt(pos.y - 20) + 'px';
        }
    },
    getItemsByClass: function(c) {
        return [].slice.call(document.getElementsByClassName(c)).map(function(item) {
            return item.id;
        });;
    },
    addListItem: function(ul, li) {
        objs[ul].appendChild(objs[li]);
    },
    addMenuListItem: function(id, text, click, mouseover) {
        var li = document.createElement('li');
        var span = document.createElement('span');
        ensureObjId(li);
        span.innerText = text;
        li.appendChild(span);
        if (click) span.addEventListener('click', click);
        if (mouseover) span.addEventListener('mouseover', mouseover);
        objs[id].appendChild(li);
        return li.id;
    },
    clearListItems: function(id) {
        [].slice.call(objs[id].children).forEach(function(child) {
           if (!child.className.split(' ').reduce(function(a, b) {
                if (a) return true;
                if (b === 'listItem') return true;
                return false;
           }, false)) objs[id].removeChild(child);
        });
    },
    getInputsValues: function(ancestor) {
        return [].slice.call(document.getElementsByTagName('select')).
            concat([].slice.call(document.getElementsByTagName('input'))).
            filter(function(item) {
                return (objs[ancestor].contains(item));
            }).map(function(item) {
                return {id: item.id, value: item.value};
            });
    },
    onload: function(ev) {
        if (loaded) return ev();
        loadEvents.push(ev);
    },
    getGenericListItem: function() {
        return document.getElementsByClassName('genericListItem')[0].cloneNode(true);
    },
    attachEvent: function(id, type, func) {
        if (id.cloneNode) id = ensureObjId(id);
        var fid = getId();
        functions[fid] = {f: func, id: id, type: type};
        api.onload(function() { 
            objs[id].addEventListener(type, func); 
        });
        return fid;
    },
    detachEvent: function(fid) {
        var ev = functions[fid];
        if (objs[ev.id].removeEventListener) objs[ev.id].removeEventListener(ev.type, ev.f);
        delete functions[fid];
    },
    display: function(id) {
        [].slice.call(document.getElementsByClassName('slides')).forEach(function(obj) { effects.fadeOut(obj); });
        effects.fadeIn(objs[id]);
    },
    getObjById: function(id) {
        return objs[id];
    },
    getGenericButton: function(text, click, mouseover) {
        var button = document.createElement('button');
        button.innerText = text;
        if (click) button.addEventListener('click', click);
        if (mouseover) button.addEventListener('mouseover', mouseover);
        return button;
    },
    modal: function(msg) {
        api.getObjById('modalMsg').innerText = msg;
        effects.fadeIn(api.getObjById('modal'));
    },
    updateWeaponIcons: function(weapons) {
        var changed;
        if (weapons) {
            weapons.forEach(function(weapon) {
                if (weapons.type !== oldWeapons.type) changed = true;
            });
            if (changed) {
                oldWeapons = weapons;
                weaponIcons.forEach(function(icon) {
                    weaponIcons[index].style.backgroundImage = '';
                });
                iconEvents.forEach(function(ev) {
                    ev.dom.removeEventListener(ev.func);
                });
                weapons.forEach(function(weapon, index) {
                    var click = function() {
                        weapon.selectWeapon = true;
                    };
                    weaponIcons[index].style.backgroundImage = weapon.icon;
                    iconEvents.push({dom: weaponIcons[index], func: click});
                    weaponIcons.addEventListener('click', click);
                });
            }
        }
    }
};

for (var i = 0; i < 4; i++) {
    weaponIcons.push(document.createElement('li'));
    weaponIcons[i].className = 'weaponicon';
    (function() { 
        var j = i;
        if (objs['weaponOptions']) api.onload(function() { 
            objs['weaponOptions'].appendChild(weaponIcons[j]); 
        });
    })();
}
module.exports = api;

},{"./effects.js":10,"./events.js":11,"./getId.js":14}],8:[function(require,module,exports){
var makeStartOptions = require('./makeStartOptions.js');
var post = require('./post.js');
var testObj = require('./test-obj.js');
var world = require('./world.js');
var canvas = document.getElementById('canvas');
var getId = require('./getId.js').getId;
var events = require('./events.js');
var dom = require('./dom.js');
var editingObj = false;
var draggingObj = false;
var worldInspectorFids = [];
var clickObj = {};
var camera = testObj({pos: {
    x: 1000,
    y: 1000
}});
camera.camera = true;
camera.load();
camera.step();

function pauseEvent(e){
    if(e.stopPropagation) e.stopPropagation();
    if(e.preventDefault) e.preventDefault();
    e.cancelBubble=true;
    e.returnValue=false;
    return false;
};

var screenWidth = canvas.clientWidth;
var screenHeight = canvas.clientHeight;
var mousePos = {x: 0, y: 0};
var menuItems = {
    geometry: {
        square: [],
        circle: []
    },
    base: {
        spawner: []
    }
};

var state = 'noMenus';
var states = {
    noMenus: function() {
        dom.hideMenu();
    },
    editingObj: function(ev, obj) {
        if (!obj) obj = clickObj;
        dom.hideMenu();
        dom.clearInputs('objInspector');
        dom.clearListItems('objInspector');
        editingObj = obj;
        updateObjInspectorOptions();
        dom.showMenu('objInspector');
        updateObjInspector();
        focusOnEditingObj();
        dom.onHideMenu('objInspector', function() { editingObj = null; });
    },
    levelMenu: function(gamePos, canvasPos) {
        dom.hideMenu();
        dom.showMenu('levelMenu', canvasPos);
        dom.clearListItems('levelMenuObjs');
        var fid = dom.attachEvent('levelMenu', 'mouseout', function(ev) {
            if (dom.getObjById('levelMenu').contains(ev.toElement)) return;
            updateState('noMenus');
        });
        dom.onHideMenu('levelMenu', function() { dom.detachEvent(fid); });
        getCollidingObjs(clickObj).forEach(function(item) {
            dom.addMenuListItem('levelMenuObjs', (item.type + '  ' + item.id), function(ev) {
                dom.hideMenu('levelMenu');
                updateState('editingObj', ev, item);
            }, function(ev) {
                
            });
        });
    }
};


var updateState = function(newState) {
    state = newState;
    states[state].apply(null, [].slice.call(arguments, 1));
};

var getCollidingObjs = function(testObj) {
    return world.getItems().filter(function(obj) {
        return (obj.detectCollide(testObj));
    });
};

var updateObjInspector = function() {
    if (!editingObj) return;
    dom.getObjById('objType').value = editingObj.type;
    dom.getObjById('objXPos').value = editingObj.pos.x;
    dom.getObjById('objYPos').value = editingObj.pos.y;
    dom.getObjById('objRotation').value = editingObj.pos.rot;
    if (editingObj.radius) dom.getObjById('objRadius').value = editingObj.radius;
    if (editingObj.width) {
        dom.getObjById('objWidth').value = editingObj.width;
        dom.getObjById('objHeight').value = editingObj.height;
    }
    if (editingObj.base === 'spawner') {
        dom.getObjById('objStart').value = editingObj.startOptions().start;
        dom.getObjById('objInterval').value = editingObj.startOptions().interval;
        dom.getObjById('objSpawnCount').value = editingObj.startOptions().spawnCount;
    }
};

var updateObjInspectorOptions = function() {
    if (editingObj.base === 'spawner') menuItems.base.spawner.forEach(function(item) {
        dom.addListItem('objInspector', item);
    });
    if (editingObj.geometry) menuItems.geometry[editingObj.geometry].forEach(function(item) {
        dom.addListItem('objInspector', item);
    });
};

var updateEditingObj = function() {
    if (!editingObj) return;
    var values = {};
    dom.getInputsValues('objInspector').forEach(function(item) {
        values[item.id] = item.value;
    });
    var newObj;
    if (values.objType !== editingObj.type) {
        newObj = world.loadItems({
            entity: dom.getObjById('objType').value,
            pos: {
                x: editingObj.pos.x,
                y: editingObj.pos.y
            }
        });
        editingObj.unload();
        editingObj = newObj;
        dom.clearListItems('objInspector');
        world.updateNewItems();
        updateObjInspectorOptions();
        updateObjInspector();
        values = {};
        dom.getInputsValues('objInspector').forEach(function(item) {
            values[item.id] = item.value;
        });
    }
    editingObj.move({x: parseInt(values.objXPos), y: parseInt(values.objYPos), rot: parseFloat(values.objRotation)});
    if (values.objRadius) editingObj.radius = parseInt(values.objRadius);
    if (values.objWidth) editingObj.setDimensions({width: values.objWidth, height: values.objHeight});
    if (editingObj.base === 'spawner') editingObj.startOptions({
        start: values.objStart,
        interval: values.objInterval,
        spawnCount: values.objSpawnCount
    });

    editingObj.processMovementEvents();
};

var deleteEditingObj = function() {
    editingObj.unload();
    updateState('noMenus');
};

var cloneEditingObj = function() {
    var newObj = world.loadItems({
        entity: editingObj.type,
        pos: {
            x: editingObj.pos.x, 
            y: editingObj.pos.y,
            rot: editingObj.pos.rot
        },
        width: editingObj.width,
        height: editingObj.height
    });
    if (editingObj.startOptions) {
        newObj.startOptions(editingObj.startOptions());
    }
    world.updateNewItems();
    newObj.processMovementEvents();
    newObj.load();
};

var translatePosition = function(pos) {
    var canvasPos = {
        x: pos.x * (world.canvasDim.x / screenWidth),
        y: pos.y * (world.canvasDim.y / screenHeight)
    };
    var gamePos = {
        x: canvasPos.x - (world.canvasDim.x / 2 - camera.pos.x),
        y: canvasPos.y - (world.canvasDim.y / 2 - camera.pos.y)
    }
    return gamePos;
};

var canvasClick = function(ev) {
    //ev.preventDefault();
    pauseEvent(ev);
    var startMousePos = {x: ev.clientX, y: ev.clientY};
    var startGamePos = translatePosition(startMousePos);
    var startObjPos;
    clickObj = testObj({pos: startGamePos});
    clickObj.load();
    clickObj.step();
    if (ev.button === 2) updateState('levelMenu', startGamePos, {x: ev.clientX, y: ev.clientY});
    if (ev.button === 0) {
        if (editingObj && getCollidingObjs(clickObj).filter(function(item) { return (item.id === editingObj.id); }).length) {
            draggingObj = editingObj;
        } else {
            draggingObj = api.camera;
        }
        startObjPos = {x: draggingObj.pos.x, y: draggingObj.pos.y};
        var mousemoveFid = dom.attachEvent('window', 'mousemove', function(ev) {
            pauseEvent(ev);
            var gamePos = translatePosition({x: ev.clientX, y: ev.clientY});
            var gamePosDelta = {x: (gamePos.x - startGamePos.x), y: (gamePos.y - startGamePos.y)};
            if (draggingObj.camera) {
                draggingObj.move({x:  (startObjPos.x - gamePosDelta.x), y:  (startObjPos.y - gamePosDelta.y)});
                startObjPos = {x: draggingObj.pos.x, y: draggingObj.pos.y};
                startGamePos = gamePos;
            } else {
                draggingObj.move({x: startObjPos.x + gamePosDelta.x, y: startObjPos.y + gamePosDelta.y});
            }
            draggingObj.processMovementEvents();
            updateObjInspector();
        });
        var mouseupFid = dom.attachEvent('window', 'mouseup', function() {
            dom.detachEvent(mousemoveFid);
            dom.detachEvent(mouseupFid);
            draggingObj = false;
        });
    }
};

var updateWorldInspector = function() {
    dom.getObjById('entityCount').innerText = world.getItems().length;
    dom.clearListItems('worldInspector');
    worldInspectorFids.forEach(function(fid) { dom.detachEvent(fid); });
    worldInspectorFids = [];
    world.getItems().forEach(function(entity) {
        var li = dom.getGenericListItem();
        li.innerText = entity.base + ', ' + entity.type + ', ' + entity.id;
        worldInspectorFids.push(dom.attachEvent(li, 'click', function(ev) {
            updateState('editingObj', ev, entity);
        }));
        dom.addListItem('worldInspector', li.id);
    });
};

var focusOnEditingObj = function() {
    camera.move(editingObj.pos);
};

var saveLevel = function() {
    var output = [];
    world.getItems().forEach(function(item) {
        output.push(item.getInitialConditions());
    });
    post('./levels/', {
        data: JSON.stringify(output),
        name: world.getLevelMetadata().name,
        id: world.getLevelMetadata().id
    }, function(response) {
        dom.modal(JSON.stringify(response));
        world.setLevelMetadata(response);
    });
    updateState('noMenus');
};

var updateLevelName = function() {
    dom.getObjById('levelName').value = world.getLevelMetadata().name;
};


var levelNameInputChanged = function() {
    world.setLevelMetadata({name: dom.getInputsValues('levelName')[0].value});
};

dom.attachEvent('canvas', 'mousedown', canvasClick);
dom.attachEvent('newLevel', 'click', events.emit.bind(null, 'newLevel'));
dom.attachEvent('newObject', 'click', updateState.bind(null, 'editingObj'));
dom.attachEvent('cloneObj', 'click', cloneEditingObj);
dom.attachEvent('deleteObj', 'click', deleteEditingObj);
dom.attachEvent('focusObj', 'click', focusOnEditingObj);
dom.attachEvent('levelName', 'change', levelNameInputChanged);
dom.attachEvent('saveLevel', 'click', saveLevel);
dom.attachEvent('mainMenuButton', 'click', events.emit.bind(null, 'mainMenu'));
dom.onload(function() {
    dom.showMenu('worldInspector');
    world.getEntityTypes().forEach(function(type) {
        var val = document.createElement('option');
        val.innerText = type;
        dom.getObjById('objType').appendChild(val);
    });
    dom.getItemsByClass('circleGeometry').forEach(function(item) {
        menuItems.geometry.circle.push(item);
    });
    dom.getItemsByClass('squareGeometry').forEach(function(item) {
        menuItems.geometry.square.push(item);
    });
    dom.getItemsByClass('spawnerBase').forEach(function(item) {
        menuItems.base.spawner.push(item);
    });
    dom.getInputsValues('objInspector').forEach(function(item) {
        dom.attachEvent(item.id, 'change', updateEditingObj);
    });
});

events.register('entityCount', updateWorldInspector, getId());
events.register('updateLevelName', updateLevelName, getId());

api = {
    camera: camera
};

updateState(state);

module.exports = api;

},{"./dom.js":7,"./events.js":11,"./getId.js":14,"./makeStartOptions.js":21,"./post.js":24,"./test-obj.js":31,"./world.js":36}],9:[function(require,module,exports){
require('./animationShim.js');
var post = require('./post.js');
window.logging = [];
var events = require('./events.js');
var makeInitialConditionsSavable = require('./makeInitialConditionsSavable.js');
var dom = require('./dom.js');
var renderer = require('./renderer.js');
window.world = require('./world.js');
var getId = require('./getId.js').getId;
var controller = require('./editor-controller.js');
var get = require('./get.js');
window.u_id = '';

get('./id', function(data) {
    u_id = data._id;
});

dom.onload(function() {

    renderer.connectCamera(controller.camera);
    var currentGameId = getId();
    world.decorateAllItems(makeInitialConditionsSavable);

    var states = {
        mainMenu: function() {
            dom.display('mainMenu');
            dom.clearListItems('ownerLevels');
            dom.clearListItems('publicLevels');
            get('./levels/', function(data) {
                data.forEach(function(level) {
                    var list = 'ownerLevels';
                    if (level.snapshot) list = 'publicLevels';
                    var li = dom.addMenuListItem(list, level.name, function() {
                        states.loadLevel(level.id);
                    });
                    if (!level.snapshot) dom.getObjById(li).appendChild(dom.getGenericButton('delete', function() {
                        post('./levels/delete/', {
                            levelId: level.id
                        }, function(data) {
                            states.mainMenu();
                        });
                    }));
                    if (!level.snapshot) dom.getObjById(li).appendChild(dom.getGenericButton('publish', function() {
                        post('./levels/publish/', {
                            levelId: level.id
                        }, function(data) {
                            states.mainMenu();
                        });
                    }));
                });
            });
        },
        newLevel: function() {
            world.unloadWorld();
            states.editingLevel();
        },
        loadLevel: function(id) {
            world.loadLevel(id, function() {
                states.editingLevel();
            });
        },
        editingLevel: function() {
            dom.display('gameView');
            events.register('animate', function() {
                renderer.step();
            }, currentGameId);
        },
        pausedLevel: function() {
            dom.display('pauseMenu');
            events.unregister(currentGameId);
            currentGameId = getId();
        }
    };

    
    events.register('newLevel', states.newLevel, getId());
    events.register('start', states.editingLevel, getId());

    events.register('pause', states.pausedLevel, getId());

    events.register('mainMenu', states.mainMenu, getId());
    states.mainMenu();

});







},{"./animationShim.js":3,"./dom.js":7,"./editor-controller.js":8,"./events.js":11,"./get.js":12,"./getId.js":14,"./makeInitialConditionsSavable.js":18,"./post.js":24,"./renderer.js":26,"./world.js":36}],10:[function(require,module,exports){
module.exports = {
    fadeIn: function(obj) {
        obj.style.opacity = 1;
        obj.style.zIndex = 3;
        obj.style.display = 'inherit';
    },
    fadeOut: function(obj) {
        obj.style.opacity = 0;
        obj.style.zIndex = 1;
        obj.style.display = 'none';
    }
};

},{}],11:[function(require,module,exports){
var events = {};

var api = {
    emit: function(e) {
        for (var id in events) {
            if (events[id].e === e) events[id].f();
        }
    },
    register: function(e, f, id) {
        //console.log('registering event ' + e, f, id);
        events[id] = {
            f: f,
            e: e
        };
    },
    unregister: function(id) {
        delete events[id];
    }
};

module.exports = api;

var animate = function() {
    api.emit('animate');
    window.requestAnimationFrame(animate);
};
if (typeof window !== 'undefined') animate();

},{}],12:[function(require,module,exports){

module.exports = function(url, callback) {
    var http = new XMLHttpRequest();

    http.open('GET', url, true);

    //Send the proper header information along with the request
    http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

    http.onreadystatechange = function() {
        var data;
        if((http.readyState === 4) && http.status === 200) {
            data = JSON.parse(http.responseText);
            callback(data)
        }
    };
    http.send();

};


},{}],13:[function(require,module,exports){
var Entities = {};

Entities['player'] = require('./Player.js');
Entities['test'] = require('./test-obj.js');
Entities['gun'] = require('./gun.js');
Entities['tile'] = require('./square.js');
Entities['zombieSpawner'] = require('./spawner.js');
Entities['zombie'] = require('./Zombie.js');
Entities['wall'] = require('./wall.js');
//Entities['door'] = require('./Door.js');
//Entities['sensor'] = require('./Sensor.js');

module.exports = Entities;

},{"./Player.js":1,"./Zombie.js":2,"./gun.js":15,"./spawner.js":27,"./square.js":29,"./test-obj.js":31,"./wall.js":33}],14:[function(require,module,exports){
var lastId = 0;

var api = {
    getId: function() {
        return 'a' + lastId++;
    }
};

module.exports = api;

},{}],15:[function(require,module,exports){
var weapon = require('./weapon.js');
//var world = require('./world.js');
var Bullet = require('./bullet.js');
var makeInventory = require('./makeInventory.js');

module.exports = function(options) {
    var gun = weapon();
    var bullet;
    if (options.pos) gun.move(options.pos);
    gun.use = function() {
        var bullet = gun.getInventory()[0];
        if (!bullet) {
            bullet = Bullet({velocity: 10, power: 10, range: 500});
            gun.takeItems(bullet);
            world.loadItems(bullet);
        }
        gun.dropItem(bullet);
        bullet.fire(gun.owner.pos);
    };

    gun.type = 'gun';

    for (var i = 0; i < options.startAmmo; i++) {
    }

    return gun;
};




},{"./bullet.js":5,"./makeInventory.js":19,"./weapon.js":34}],16:[function(require,module,exports){
module.exports = [
{"entity": "tile",
    "pos": {
        "x":9930,
        "y":10156,
        "rot":0.78
    },
    "width":"5000",
    "height":"5000"},
{"entity":"player",
    "pos": {"x":10023.028868996085,"y":9980.773164775213,"rot":0},"radius":50},
{"entity":"gun",
    "pos": {"x":10023.028868996085,"y":9980.773164775213,"rot":0}},
{"entity":"wall","pos":{"x":10448,"y":10773,"rot":0.78},"width":"100","height":"1200"},{"entity":"wall","pos":{"x":9599,"y":9799,"rot":0.78},"width":"100","height":"1200"},{"entity":"wall","pos":{"x":8133,"y":8445,"rot":0.78},"width":"100","height":"5000"},{"entity":"wall","pos":{"x":10681,"y":9777,"rot":2.34},"width":"100","height":"1200"},{"entity":"wall","pos":{"x":10924,"y":8514,"rot":1.58},"width":"100","height":"800"},{"entity":"wall","pos":{"x":10003,"y":8608,"rot":3.14},"width":"100","height":"1600"},{"entity":"wall","pos":{"x":11642,"y":8413,"rot":2.34},"width":"100","height":"5000"},{"entity":"wall","pos":{"x":11695,"y":11877,"rot":0.78},"width":"100","height":"5000"},{"entity":"wall","pos":{"x":8183,"y":11921,"rot":2.34},"width":"100","height":"5000"},{"entity":"wall","pos":{"x":10267,"y":8790,"rot":3.14},"width":"100","height":"1200"},{"entity":"wall","pos":{"x":10351,"y":7861,"rot":1.58},"width":"100","height":"800"},{"entity":"wall","pos":{"x":11024,"y":9055,"rot":0.3},"width":"400","height":"250"},{"entity":"wall","pos":{"x":11898,"y":9490,"rot":0.6},"width":"900","height":"100"},{"entity":"wall","pos":{"x":11619,"y":9895,"rot":0.6},"width":"900","height":"100"},{"entity":"wall","pos":{"x":9500,"y":11786,"rot":0},"width":"800","height":"800"},
{"entity":"zombieSpawner","pos":{"x":7769,"y":9411,"rot":0},"radius":10, "start": true, "interval": 20000, "spawnCount": 15},
{"entity":"zombieSpawner","pos":{"x":12379,"y":9449,"rot":0},"radius":10, "start": false, "interval": 45000, "spawnCount": 35},
{"entity":"zombieSpawner","pos":{"x":8760,"y":11983,"rot":0},"radius":10, "start": true, "interval": 20000, "spawnCount": 5}

];



},{}],17:[function(require,module,exports){
var perpPoint = function(verts, p) {
    var output = verts.map(function(v0, index, array) {
        var v1 = array[index + 1];
        if (index + 1 === array.length) v1 = array[0];
        var k = ((v1.y - v0.y) * (p.x - v0.x) - (v1.x - v0.x) * (p.y - v0.y)) / (Math.pow(v1.y - v0.y, 2) + Math.pow(v1.x - v0.x, 2));
        var perpPoint = {x: p.x - k * (v1.y - v0.y), y: p.y + k * (v1.x - v0.x)};
        var dis = Math.sqrt(Math.pow(p.x - perpPoint.x, 2) + Math.pow(p.y - perpPoint.y, 2));
        return {dis: dis, perpPoint: perpPoint};
    });
    return output.reduce(function(past, current) { 
        if (!past.dis) return current;
        if (current.dis < past.dis) return current;
        return past;
    }).perpPoint;
};


var pointInPolygon = function(square, circle) {
    var c = false;
    var i, j, x, y, p;
    var vertices = square.verts;
    var point = circle.pos;

    j = vertices.length - 1;

    for (i = 0; i < vertices.length; i++) {

        if ( ((vertices[i].y > point.y) !== (vertices[j].y > point.y)) &&
        (point.x < (vertices[j].x - vertices[i].x) * (point.y - vertices[i].y) / (vertices[j].y - vertices[i].y) + vertices[i].x) ) {
            c = !c;
        }

        j = i;
    }

    if (c) {
        if (square.solid && circle.solid) {
            p = perpPoint(vertices, point);
            //x = p.x - circle.pos.x;
            //y .= p.y - circle.pos.y;
            //circle.addEffect(function() { 
                circle.move({x: p.x, y: p.y}); 
            //});
            circle.collide(square);
            square.collide(circle);
        }
        return true;
    }
};

var longPush = function(a, b) {
    var then = Date.now();
    var x = Math.cos(b.pos.rot) * b.velocity;
    var y = Math.sin(b.pos.rot) * b.velocity;
    a.addEffect(function() {
        var elapsedTime = (Date.now() - then) / 1000;
        var scaler = Math.pow(elapsedTime - 1, 2);
        if (elapsedTime > 1) return false;
        a.push({x: x * scaler, y: y * scaler});

    });
};

var circleDetect = function(a, b) {
    var x, y, dis, radius, delta, theta, aDelta, bDelta;
    x = a.pos.x - b.pos.x;
    y = a.pos.y - b.pos.y;
    dis = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
    radius = parseInt(a.radius) + parseInt(b.radius);

    if (dis < radius) {
        if (a.solid && b.solid) {
            delta = (radius - dis);
            theta = Math.atan2(y, x);
            a.addEffect(function() { 
                a.push({
                    x: (Math.cos(theta) * delta), 
                    y: (Math.sin(theta) * delta)
                }); 
                return false;
            });
            b.addEffect(function() { 
                b.push({
                    x: (Math.cos(theta) * -delta),  
                    y: (Math.sin(theta) * -delta)
                }); 
                return false;
            });
            if (b.inertia) longPush(a, b);
            if (a.inertia) longPush(b, a);
            a.collide(b);
            b.collide(a);
        }
        return true;
    }
};

var setAABB = function(obj) {
    var AABB = {
        xs: [{type: 'b', val: Infinity, obj: obj}, {type: 'e', val: -Infinity, obj: obj}],
        ys: [{type: 'b', val: Infinity, obj: obj}, {type: 'e', val: -Infinity, obj: obj}]
    };

    if (obj.geometry === 'circle') {
        AABB.xs[0].val = obj.pos.x - obj.radius;
        AABB.xs[1].val = obj.pos.x + obj.radius;
        AABB.ys[0].val = obj.pos.y - obj.radius;
        AABB.ys[1].val = obj.pos.y + obj.radius;
        obj.AABB = AABB;
        return;
    };
    if (obj.geometry === 'square') {
        obj.AABB = obj.verts.reduce(function(acc, vert) {
            if (vert.x < acc.xs[0].val) acc.xs[0].val = vert.x;
            if (vert.x > acc.xs[1].val) acc.xs[1].val = vert.x;
            if (vert.y < acc.ys[0].val) acc.ys[0].val = vert.y;
            if (vert.y > acc.ys[1].val) acc.ys[1].val = vert.y;
            return acc;
        }, AABB);
    }
};

var setVerts = function(obj) {

    obj.pos.x = parseInt(obj.pos.x);
    obj.pos.y = parseInt(obj.pos.y);

    var verts = [
        {x: obj.pos.x - obj.width / 2, y: obj.pos.y - obj.height / 2}, 
        {x: obj.pos.x + obj.width / 2, y: obj.pos.y - obj.height / 2}, 
        {x: obj.pos.x + obj.width / 2, y: obj.pos.y + obj.height / 2}, 
        {x: obj.pos.x - obj.width / 2, y: obj.pos.y + obj.height / 2}, 
    ];

    var rot = obj.pos.rot;
    var ox = obj.pos.x;
    var oy = obj.pos.y;

    obj.verts = verts.map(function(item) {
        var vx = item.x;
        var vy = item.y;
        item.x = Math.cos(rot) * (vx - ox) - Math.sin(rot) * (vy - oy) + ox;
        item.y = Math.sin(rot) * (vx - ox) + Math.cos(rot) * (vy - oy) + oy;
        return item;
    });

    setAABB(obj);
};

module.exports = function(obj, type) {
    obj.geometry = type;
    if (type === 'circle') {
        obj.detectCollide = function(collider) {
            if (collider.geometry === 'circle') return circleDetect(obj, collider);
            if (collider.geometry === 'square') return pointInPolygon(collider, obj);
        };
        obj.move({ev: setAABB.bind(null, obj)});
        setAABB(obj);
    }
    if (type === 'square') {
        obj.detectCollide = function(collider) {
            if (collider.geometry === 'square') return false;
            if (collider.geometry === 'circle') return pointInPolygon(obj, collider);
        };
        obj.width = 100;
        obj.height = 100;
        obj.setDimensions = function(dim) {
            if (dim) {
                if (dim.width) obj.width = dim.width;
                if (dim.height) obj.height = dim.height;
                setVerts(obj);
            }
        }
        obj.move({ev: setVerts.bind(null, obj)});
        setVerts(obj);
    }
};

},{}],18:[function(require,module,exports){

module.exports = function(obj) {
    obj.getInitialConditions = function() {
        var initialConditions = {
            entity: obj.type,
            pos: {
                x: obj.pos.x,
                y: obj.pos.y,
                rot: obj.pos.rot
            },
        };
        if (obj.geometry && obj.geometry === 'circle') {
            initialConditions.radius = obj.radius;
        }
        if (obj.geometry && obj.geometry === 'square') {
            initialConditions.width = obj.width;
            initialConditions.height = obj.height;
        }
        var startOptions;
        if (obj.startOptions) {
            startOptions = obj.startOptions();
            for (var option in startOptions) {
                initialConditions[option] = startOptions[option];
            }
        }
        return initialConditions;
    };
};

},{}],19:[function(require,module,exports){

module.exports = function(obj) {

    var inventory = [];
    obj.takeItems = function(items) {
        if (!items.length) items = [items];
        items.forEach(function(item) {
            var currentObj = obj.getInventoryByType(item.type)[0];
            if (currentObj && currentObj.consolidateInventory) {
                currentObj.takeItems(item.getInventory());
                item.unload();
            } else {
                inventory.push(item);
                item.owner = obj;
                item.load();
            }
        });
    };
    obj.dropItem = function(item) {
        item.owner = false;
        inventory = inventory.filter(function(maybeItem) { if (maybeItem.id !== item.id) return true; });
    };
    obj.getInventory = function() {
        return inventory.slice();
    };
    obj.getInventoryByType = function(type) {
        return inventory.filter(function(item) { if (item.type === type) return true; });
    };
    obj.getInventoryByBase = function(base) {
        return inventory.filter(function(item) { if (item.base === base) return true; });
    };
}


},{}],20:[function(require,module,exports){
module.exports = function(obj) {
    obj.solid = true;
};

},{}],21:[function(require,module,exports){


module.exports = function(obj) {
    var startOptions = {};
    obj.startOptions = function(options) {
        if (!options) return startOptions;
        for (var option in options) {
            startOptions[option] = options[option];
        }
    };
};

},{}],22:[function(require,module,exports){
var textureData = require('./textureData.js');

module.exports = function makeVisible (obj) {
    obj.load(function() { 
        obj.textureData = textureData[obj.base][obj.type]; 
        obj.visible = true;
        obj.addEffect(function() {
            if (obj.inContainer()) {
                obj.visible = false;
            } else {
                obj.visible = true;
            }
            return true;
        });
    });
};

},{"./textureData.js":32}],23:[function(require,module,exports){
function MatrixStack() {
      this.stack = [];

      //since the stack is empty this will put an initial matrix in it
          this.restore();
}

// Pops the top of the stack restoring the previously saved matrix
MatrixStack.prototype.restore = function() {
    this.stack.pop();
    // Never let the stack be totally empty
    if (this.stack.length < 1) {
        this.stack[0] = m4.identity();
    }
};

// Pushes a copy of the current matrix on the stack
MatrixStack.prototype.save = function() {
    this.stack.push(this.getCurrentMatrix());
};

// Gets a copy of the current matrix (top of the stack)
MatrixStack.prototype.getCurrentMatrix = function() {
    return this.stack[this.stack.length - 1].slice();
};

// Lets us set the current matrix
MatrixStack.prototype.setCurrentMatrix = function(m) {
    return this.stack[this.stack.length - 1] = m;
};

// Translates the current matrix
MatrixStack.prototype.translate = function(x, y, z) {
    if (z === undefined) {
        z = 0;
    }
    var m = this.getCurrentMatrix();
    this.setCurrentMatrix(m4.translate(m, x, y, z));
};

// Rotates the current matrix around Z
MatrixStack.prototype.rotateZ = function(angleInRadians) {
    var m = this.getCurrentMatrix();
    this.setCurrentMatrix(m4.zRotate(m, angleInRadians));
};

// Scales the current matrix
MatrixStack.prototype.scale = function(x, y, z) {
    if (z === undefined) {
        z = 1;
    }
    var m = this.getCurrentMatrix();
    this.setCurrentMatrix(m4.scale(m, x, y, z));
};


module.exports = MatrixStack;

},{}],24:[function(require,module,exports){

module.exports = function(url, data, callback) {
    var http = new XMLHttpRequest();
    var params = '';
    for (var param in data) {
        params += ((params.length) ? '&' : '') + param + '=' + data[param];
    }
    http.open('POST', url, true);

    //Send the proper header information along with the request
    http.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

    http.onreadystatechange = function() {//Call a function when the state changes.
        var data;
        if(http.readyState === 4 && http.status === 200) {
            data = JSON.parse(http.responseText);
            callback(data);
        }
    };
    http.send(params);

};


},{}],25:[function(require,module,exports){
var baseEntity = require('./baseEntity.js');
var makeVisible = require('./makeVisible.js');
var makeGeometry = require('./makeGeometry.js');

module.exports = function() {
    var projectile = baseEntity();
    makeVisible(projectile);
    makeGeometry(projectile, 'circle');
    projectile.base = 'projectile';

    return projectile;
};


},{"./baseEntity.js":4,"./makeGeometry.js":17,"./makeVisible.js":22}],26:[function(require,module,exports){
var events = require('events');
var gl = require('./webgl-lab.js');
var World = require('./world.js');
//var audio = require('./audio.js');
var currentLevel;
var pov;
var canvasDim = gl.canvasDimensions;
World.canvasDim = canvasDim;


var step = function() {

    gl.clear();
    var world = World.getItems();
    //if (pov) audio.updatePov(pov.pos);
    world.forEach(function(item) { 
        var width, height, sx, sy, i, sw, sh, pattern;
        if (item.audio) {
            audio[item.type][item.audio](item.pos);
            item.audio = null;
        }
        if (item.visible) {
            if (item.textureData.poses) {
                sw = item.textureData.frame.w / item.textureData.poses.x;
                sh = item.textureData.frame.h / item.textureData.poses.y;
                sx = item.textureData.frame.x + sw * item.pose.x;
                sy = item.textureData.frame.y + sh * item.pose.y;

            }  else {
                sx = item.textureData.frame.x
                sy = item.textureData.frame.y
                sw = item.textureData.frame.w;
                sh = item.textureData.frame.h;
            }
            if (item.geometry === 'square') { 
                width = item.width;
                height = item.height;
            }
            if (item.geometry === 'circle') { 
                width = sw;
                height = sh;
            }
            gl.matrix.restore(); 

            gl.matrix.translate( (item.pos.x + (canvasDim.x / 2 - pov.x)), (item.pos.y + (canvasDim.y / 2 - pov.y)));
            gl.matrix.rotateZ(item.pos.rot);
            gl.drawImg(sx, sy, sw, sh, - width / 2, - height / 2, width, height);

        }
    });

};

var api = {
    step: function() {
        if (pov) step();
    },
    connectCamera: function(camera) {
        pov = camera.pos;
    },
    setGl: function(g) {
        gl = g;
    }
};


module.exports = api;

},{"./webgl-lab.js":35,"./world.js":36,"events":37}],27:[function(require,module,exports){
var baseEntity = require('./baseEntity.js');
var zombie = require('./Zombie.js');
var makeStartOptions = require('./makeStartOptions.js');
var makeGeometry = require('./makeGeometry.js');
//var world = require('./world.js');

module.exports = function(options) {
    var spawner = baseEntity();
    makeStartOptions(spawner);
    makeGeometry(spawner, 'circle');
    var timer = Date.now();
    var spawning = options.start;
    var spawnCount = options.spawnCount;
    var lastSpawn = Date.now();
    spawner.startOptions({
        start: options.start,
        spawnCount: options.spawnCount,
        interval: options.interval
    });
    
    spawner.base = 'spawner';
    spawner.type = 'zombieSpawner';
    spawner.move(options.pos);
    spawner.step(function() {
        var now = Date.now();
        if (spawning) {
            if (spawnCount === 0) {
                spawnCount = options.spawnCount;
                spawning = false;
                timer = now;
            }
            if (now - lastSpawn > 500) {
                lastSpawn = now;
                world.loadItems(zombie({pos: spawner.pos}));
                spawnCount--;
            }

        } else {
            if (now - timer > options.interval) {
                spawning = true;
            }
        }
    });

    return spawner;
};


},{"./Zombie.js":2,"./baseEntity.js":4,"./makeGeometry.js":17,"./makeStartOptions.js":21}],28:[function(require,module,exports){
module.exports = {"frames":{"bullet":{"frame":{"x":453,"y":922,"w":201,"h":46},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":201,"h":46},"sourceSize":{"w":201,"h":46}},"machinegun":{"frame":{"x":0,"y":922,"w":150,"h":150},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":150,"h":150},"sourceSize":{"w":150,"h":150}},"pistol":{"frame":{"x":151,"y":922,"w":150,"h":150},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":150,"h":150},"sourceSize":{"w":150,"h":150}},"player":{"frame":{"x":0,"y":0,"w":1500,"h":280},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1500,"h":280},"sourceSize":{"w":1500,"h":280}},"shotgun":{"frame":{"x":302,"y":922,"w":150,"h":150},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":150,"h":150},"sourceSize":{"w":150,"h":150}},"wall":{"frame":{"x":453,"y":969,"w":100,"h":100},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":100,"h":100},"sourceSize":{"w":100,"h":100}},"zombie1":{"frame":{"x":0,"y":1760,"w":1500,"h":560},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1500,"h":560},"sourceSize":{"w":1500,"h":560}},"zombie2":{"frame":{"x":0,"y":281,"w":1500,"h":640},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1500,"h":640},"sourceSize":{"w":1500,"h":640}},"zombie3":{"frame":{"x":0,"y":1634,"w":1500,"h":686},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":1500,"h":686},"sourceSize":{"w":1500,"h":686}}},"meta":{"app":"https://www.leshylabs.com/apps/sstool/","version":"Leshy SpriteSheet Tool v0.8.4","image":"spritesheet.png","size":{"w":1500,"h":2320},"scale":1}};

},{}],29:[function(require,module,exports){
var baseEntity = require('./baseEntity.js');
var makeVisible = require('./makeVisible.js');
var makeGeometry = require('./makeGeometry.js');

module.exports = function(options) {
    var square = baseEntity();
    makeVisible(square);
    makeGeometry(square, 'square');
    square.setDimensions({width: options.width, height: options.height});
    square.move(options.pos);
    square.base = 'square';
    square.type = 'tile';
    square.collide = function() {};

    return square;
};

},{"./baseEntity.js":4,"./makeGeometry.js":17,"./makeVisible.js":22}],30:[function(require,module,exports){
module.exports = [

    {entity: 'test', pos: {x: -400, y: -405, rot: 0}},
    {entity: 'test', pos: {x: -400, y: -405, rot: 0}}
    //{entity: 'wall', pos: {x: -450, y: -450, rot: 0}, dim: {w: 300, h: 300}},
    //{entity: 'square', pos: {x: -1250, y: -1250, rot: 45}, dim: {w: 2500, h: 2500}}

    /*{entity: 'Tile', pos: {x: 2500, y: 2500}, width: 5000, height: 5000, path: './img/background.jpg'},
    {entity: 'Block', path: './img/wall.png', pos: {x: 0, y: 3900, rot: 0}, width: 100, height: 2600},
    {entity: 'Block', path: './img/wall.png', pos: {x: 0, y: 1100, rot: 0}, width: 100, height: 2200},
    {entity: 'Block', path: './img/wall.png', pos: {x: 2500, y: 0, rot: 0}, width: 5000, height: 100},
    {entity: 'Block', path: './img/wall.png', pos: {x: 2500, y: 5000, rot: 0}, width: 5000, height: 100},
    {entity: 'Block', path: './img/wall.png', pos: {x: 5000, y: 2500, rot: 0}, width: 100, height: 5000},
    {entity: 'Block', path: './img/car1.png', pos: {x: 300, y: 300, rot: 2}, width: 200, height: 300},
    {entity: 'Zombie', img: 2, pos: {x: 1900, y: 1700, rot: 0}}
*/
];



},{}],31:[function(require,module,exports){
var baseEntity = require('./baseEntity.js');
var makeGeometry = require('./makeGeometry.js');
var makeSolid = require('./makeSolid.js');

module.exports = function(options) {
    var obj = baseEntity();
    obj.radius = 10;
    makeGeometry(obj, 'circle');
    makeSolid(obj);
    obj.base = 'obj';
    obj.type = 'test';
    obj.move(options.pos);
    obj.collide = function() {};

    return obj;
};


},{"./baseEntity.js":4,"./makeGeometry.js":17,"./makeSolid.js":20}],32:[function(require,module,exports){
var sprites = require('./sprites.js');

module.exports = {
    character: {
        zombie: { 
            frame: sprites.frames.zombie2.frame,
            poses: {
                x: 6,
                y: 4,
                slides: [6, 5, 2, 3]
            }
        },
        zombie2: { 
            frame: sprites.frames.zombie2.frame,
            poses: {
                x: 6,
                y: 2,
                slides: [6, 5]
            }
        },
        zombie3: { 
            frame: sprites.frames.zombie3.frame,
            poses: {
                x: 6,
                y: 2,
                slides: [6, 5]
            }
        },
        player: { 
            frame: sprites.frames.player.frame,
            poses: {
                x: 6,
                y: 2,
                slides: [6, 5]
            }
        }
    },
    projectile: {
        bullet: {
            frame: sprites.frames.bullet.frame
        }
    },
    square: {
        tile: {
            frame: sprites.frames.wall.frame
        },
        wall: {
            frame: sprites.frames.wall.frame
        }
    },
    weapon: {
        gun: {
            frame: sprites.frames.pistol.frame
        }
    }
};

},{"./sprites.js":28}],33:[function(require,module,exports){
var square = require('./square.js');
var makeSolid = require('./makeSolid.js');

module.exports = function(options) {
    wall = square(options);
    wall.onTop = true;
    makeSolid(wall);
    wall.type = 'wall';

    return wall;
};

},{"./makeSolid.js":20,"./square.js":29}],34:[function(require,module,exports){
var makeVisible = require('./makeVisible.js');
var makeInventory = require('./makeInventory.js');
var baseEntity = require('./baseEntity.js');
var makeSolid = require('./makeSolid.js');
var makeGeometry = require('./makeGeometry.js');


module.exports = function() {
    var weapon = baseEntity();
    makeGeometry(weapon, 'circle');
    makeSolid(weapon);
    makeVisible(weapon);
    makeInventory(weapon);
    weapon.base = 'weapon';
    weapon.radius = '10';
    weapon.coolDown = 5;
    weapon.consolidateInventory = true;
    weapon.collide = function(collider) {
        switch (collider.type) {
            case 'player':
                break;
        }

    };

    return weapon;
};

},{"./baseEntity.js":4,"./makeGeometry.js":17,"./makeInventory.js":19,"./makeSolid.js":20,"./makeVisible.js":22}],35:[function(require,module,exports){
"use strict";
var matrixStack = require('./matrixStack.js');
matrixStack = new matrixStack();

var canvasSpace = {};
canvasSpace.width = 3000;
canvasSpace.height = 1500;

var gl, drawImage = {}, drawInstances;
window.addEventListener('load', function() {
    var canvas = document.getElementById('canvas');
    canvas.setAttribute('width', canvasSpace.width);
    canvas.setAttribute('height', canvasSpace.height);
    gl = canvas.getContext('webgl');
    var ext = gl.getExtension("ANGLE_instanced_arrays"); // Vendor prefixes may apply!



    // Get A WebGL context
    /** @type {HTMLCanvasElement} */


    // setup GLSL program
    var program = webglUtils.createProgramFromScripts(gl, ["drawImage-vertex-shader", "drawImage-fragment-shader"]);

    // look up where the vertex data needs to go.
    var positionLocation = gl.getAttribLocation(program, "a_position");
    var texcoordLocation = gl.getAttribLocation(program, "a_texcoord");
    var instanceLocation = gl.getAttribLocation(program, "a_instance");

    // lookup uniforms
    var matrixLocation = gl.getUniformLocation(program, "u_matrix");
    var textureMatrixLocation = gl.getUniformLocation(program, "u_textureMatrix");
    var textureLocation = gl.getUniformLocation(program, "u_texture");

    var instanceBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, instanceBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, [0, 0, 0], gl.STATIC_DRAW);
    // Create a buffer.
    var positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);

    // Put a unit quad in the buffer
    var positions = [
        0, 0,
        0, 1,
        1, 0,
        1, 0,
        0, 1,
        1, 1,
    ];
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);

    // Create a buffer for texture coords
    var texcoordBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);

    // Put texcoords in the buffer
    var texcoords = [
        0, 0,
        0, 1,
        1, 0,
        1, 0,
        0, 1,
        1, 1,
    ];
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(texcoords), gl.STATIC_DRAW);

    // creates a texture info { width: w, height: h, texture: tex }
    // The texture will start with 1x1 pixels and be updated
    // when the image has loaded
    function loadImageAndCreateTextureInfo(url) {
        var tex = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, tex);
        // Fill the texture with a 1x1 blue pixel.
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,
                new Uint8Array([0, 0, 255, 255]));

        // let's assume all images are not a power of 2
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);

        var textureInfo = {
            width: 1,   // we don't know the size until it loads
            height: 1,
            texture: tex,
        };
        var img = new Image();
        img.addEventListener('load', function() {
            textureInfo.width = img.width;
            textureInfo.height = img.height;

            gl.bindTexture(gl.TEXTURE_2D, textureInfo.texture);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
        });
        img.src = url;

        return textureInfo;
    };

    var texture = loadImageAndCreateTextureInfo('./img/spritesheet.png');


    // Unlike images, textures do not have a width and height associated
    // with them so we'll pass in the width and height of the texture
    drawImage = function(
            srcX, srcY, srcWidth, srcHeight,
            dstX, dstY, dstWidth, dstHeight
            ) {
        var srcRotation = 0;
        if (dstX === undefined) {
            dstX = srcX;
            srcX = 0;
        }
        if (dstY === undefined) {
            dstY = srcY;
            srcY = 0;
        }
        if (srcWidth === undefined) {
            srcWidth = texture.width;
        }
        if (srcHeight === undefined) {
            srcHeight = texture.height;
        }
        if (dstWidth === undefined) {
            dstWidth = srcWidth;
            srcWidth = texture.width;
        }
        if (dstHeight === undefined) {
            dstHeight = srcHeight;
            srcHeight = texture.height;
        }

        gl.bindTexture(gl.TEXTURE_2D, texture.texture);

        // Tell WebGL to use our shader program pair
        gl.useProgram(program);

        // Setup the attributes to pull data from our buffers
        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
        gl.enableVertexAttribArray(positionLocation);
        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);
        gl.enableVertexAttribArray(texcoordLocation);
        gl.vertexAttribPointer(texcoordLocation, 2, gl.FLOAT, false, 0, 0);

        // this matirx will convert from pixels to clip space
        var matrix = m4.orthographic(0, canvasSpace.width, canvasSpace.height, 0, -1, 1);

        // this matrix moves the origin to the one represented by
        // the current matrix stack.
        matrix = m4.multiply(matrix, matrixStack.getCurrentMatrix());

        matrix = m4.translate(matrix, dstX, dstY, 0);

        // this matrix will scale our 1 unit quad
        // from 1 unit to texture.width, texture.height units
        matrix = m4.scale(matrix, dstWidth, dstHeight, 1);

        // Set the matrix.
        gl.uniformMatrix4fv(matrixLocation, false, matrix);

        // just like a 2d projection matrix except in texture space (0 to 1)
        // instead of clip space. This matrix puts us in pixel space.
        var texMatrix = m4.scaling(1 / texture.width, 1 / texture.height, 1);

        // We need to pick a place to rotate around
        // We'll move to the middle, rotate, then move back
        //texMatrix = m4.translate(texMatrix, (srcX + srcWidth * 0.5), (srcY + srcHeight * 0.5), 0);
        //texMatrix = m4.zRotate(texMatrix, srcRotation);
        //texMatrix = m4.translate(texMatrix, -(srcX + srcWidth * 0.5), -(srcY + srcHeight * 0.5), 0);

        // because were in pixel space
        // the scale and translation are now in pixels
        texMatrix = m4.translate(texMatrix, srcX, srcY, 0);
        texMatrix = m4.scale(texMatrix, srcWidth, srcHeight, 1);

        // Set the texture matrix.
        gl.uniformMatrix4fv(textureMatrixLocation, false, texMatrix);

        // Tell the shader to get the texture from texture unit 0
        gl.uniform1i(textureLocation, 0);

        // draw the quad (2 triangles, 6 vertices)
        gl.drawArrays(gl.TRIANGLES, 0, 6);
    };

    drawInstances = function(type, instances) {
        gl.bindTexture(gl.TEXTURE_2D, texture.texture);

        // Tell WebGL to use our shader program pair
        gl.useProgram(program);

        var data = new Float32Array(instances);
        var instanceCount = instances.length / 3;
        gl.bindBuffer(gl.ARRAY_BUFFER, instanceBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
        gl.enableVertexAttribArray(instanceLocation);
        gl.vertexAttribPointer(instanceLocation, 3, gl.FLOAT, false, 12, 0);
        ext.vertexAttribDivisorANGLE(instanceLocation, 3); // This makes it instanced!

        // Setup the attributes to pull data from our buffers
        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
        gl.enableVertexAttribArray(positionLocation);
        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);
        gl.enableVertexAttribArray(texcoordLocation);
        gl.vertexAttribPointer(texcoordLocation, 2, gl.FLOAT, false, 0, 0);

        var matrix = m4.orthographic(0, canvasSpace.width, canvasSpace.height, 0, -1, 1);
        matrix = m4.multiply(matrix, matrixStack.getCurrentMatrix());
        gl.uniformMatrix4fv(matrixLocation, false, matrix);

        // Tell the shader to get the texture from texture unit 0
        gl.uniform1i(textureLocation, 0);

        // Bind the instance position data
        
        // Draw the instanced meshes
        ext.drawArraysInstancedANGLE(gl.TRIANGLES, 0, 6, instanceCount);
    };
});


module.exports = {
    drawInstances: function() {
        drawInstances.apply(null, arguments);
    },
    drawImg: function() {
        drawImage.apply(null, arguments);
    },
    clear: function() {
        gl.viewport(0, 0, canvasSpace.width, canvasSpace.height);

        gl.clear(gl.COLOR_BUFFER_BIT);
    },
    matrix: matrixStack,
    canvasDimensions: {
        x: canvasSpace.width,
        y: canvasSpace.height
    }
};

},{"./matrixStack.js":23}],36:[function(require,module,exports){
var events = require('./events.js');
var level = {};
level.game = require('./level.js');
level.test = require('./test-level.js');
var Entities = require('./getEntities.js');
var circles = [];
var squares = [];
var points = [];
var xs = [];

var get = require('./get.js');

var world = [];
var newItems = [];
var universalDecorators = [];
var levelMetadata = {};

var api = {
    setLevelMetadata: function(newData) {
        for (var val in newData) {
            levelMetadata[val] = newData[val];
        }
        events.emit('updateLevelName');
    },
    getLevelMetadata: function() {
        return levelMetadata;
    },
    decorateAllItems: function(decorator) {
        world.forEach(function(item) { decorator(item); });
        universalDecorators.push(decorator);
    },
    unloadWorld: function() {
        world.forEach(function(item) {
            item.unload();
        });
        api.setLevelMetadata({
            id: null,
            name: null
        });
    },
    loadLevel: function(levelId, callback) {
        api.unloadWorld();
        get('./levels/' + levelId, function(data) {
            api.loadItems(JSON.parse(data.data));
            api.step();
            api.setLevelMetadata({
                name: data.name,
                id: data.id
            });
            if (callback) callback();
        });
        api.sortItems();
    },
    loadItems: function(items) {
        
        if (!Array.isArray(items)) {
            items = [items];
        }

        items = items.map(function(item) {
            var entity = item;
            if (!entity.type) entity = Entities[item.entity](item);
            entity.load();
            universalDecorators.forEach(function(decorator) {
                decorator(entity);
            });
            return entity;
        });
        newItems = newItems.concat(items);
        if (items.length > 1) return items;
        return items[0];
    },
    getItems: function() {
        return world.slice();
    },
    getItemById: function(id) {
        return world.filter(function(item) {
            if (item.id === id) return true;
        })[0];
    },
    getItemsByType: function(type) {
        return world.filter(function(item) {
            if (item.type === type) return true;
        });
    },
    deleteItem: function(id) {
        world = world.filter(function(item) { if (item.id !== id) return true; });
        events.emit('entityCount');
    },
    getXs: function() {
        return xs;
    },
    updateNewItems: function() {
        world = world.concat(newItems);
        api.sortItems();
        if (newItems.length) events.emit('entityCount');
        newItems = [];
    },
    step: function() {
        api.updateNewItems();
        xs = [];
        ys = [];
        newItems = [];
        circles = [];
        squares = [];
        points = [];
        world.forEach(function(item) { 
            if (item.geometry === 'circle' && item.solid) {
                circles.push(item);
            }
            if (item.geometry === 'square' && item.solid) squares.push(item);
            if (item.geometry === 'point' && item.solid) points.push(item);
            item.collisionData = {};
            item.step.call(item); 
            if (item.geometry && item.solid && !item.inContainer()) xs = xs.concat(item.AABB.xs);
        });
        api.sortItems();
        xs.sort(function(a, b) {
            return (a.val - b.val);
        });
    },
    sortItems: function() {
        world.sort(function(a, b) {
            return a.onTop;
        });
    },
    getGeometry(geometry) {
        if (geometry === 'circle') return circles;
        if (geometry === 'square') return squares;
        if (geometry === 'point') return points;
    },
    getEntityTypes() {
        var entities = [];
        for (var entity in Entities) {
            entities.push(entity);
        };
        return entities;
    } 
};

module.exports = api;

},{"./events.js":11,"./get.js":12,"./getEntities.js":13,"./level.js":16,"./test-level.js":30}],37:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}]},{},[9])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
